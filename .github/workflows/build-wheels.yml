name: Build and Publish Wheels

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.1
  workflow_dispatch:  # Allow manual trigger for testing

jobs:
  build_wheels:
    name: Build wheel for Python ${{ matrix.python-version }} CUDA ${{ matrix.cuda-version }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        cuda-version: ['12.1.0', '12.4.0', '12.8.0']
      fail-fast: false  # Continue building other wheels even if one fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install CUDA toolkit ${{ matrix.cuda-version }}
        uses: Jimver/cuda-toolkit@v0.2.28
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda-version }}
          method: 'network'
          sub-packages: '["nvcc", "cudart", "cudart-dev", "cusparse", "cusparse-dev", "cublas", "cublas-dev"]'

      - name: Verify CUDA installation
        run: |
          nvcc --version
          echo "CUDA_HOME=$CUDA_PATH" >> $GITHUB_ENV

      - name: Install PyTorch with CUDA ${{ matrix.cuda-version }}
        run: |
          # Extract major.minor version (e.g., "12.1.0" -> "12.1")
          CUDA_VERSION="${{ matrix.cuda-version }}"
          CUDA_MINOR=$(echo "$CUDA_VERSION" | cut -d'.' -f1,2)

          # Map CUDA version to PyTorch wheel URL
          if [ "$CUDA_MINOR" = "12.1" ]; then
            TORCH_INDEX="https://download.pytorch.org/whl/cu121"
          elif [ "$CUDA_MINOR" = "12.4" ]; then
            TORCH_INDEX="https://download.pytorch.org/whl/cu124"
          elif [ "$CUDA_MINOR" = "12.8" ]; then
            TORCH_INDEX="https://download.pytorch.org/whl/cu128"
          else
            TORCH_INDEX="https://download.pytorch.org/whl/cu121"
          fi

          pip install torch>=2.1 --index-url $TORCH_INDEX
          python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"

      - name: Install build dependencies
        run: |
          pip install --upgrade pip setuptools wheel build

      - name: Build wheel
        run: |
          python -m build --wheel --no-isolation
          ls -lh dist/

      - name: Install and test wheel
        run: |
          pip install dist/*.whl
          python -c "import torch_fps; print('torch-fps imported successfully')"
          python -c "from torch_fps import farthest_point_sampling; print('FPS function available')"

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-py${{ matrix.python-version }}-cu${{ matrix.cuda-version }}
          path: dist/*.whl
          retention-days: 7

  publish:
    name: Publish wheels to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: wheel-*
          merge-multiple: true

      - name: List wheels
        run: ls -lh dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true  # Skip if version already exists
